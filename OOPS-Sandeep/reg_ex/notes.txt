. --> matches anything and everything(a-z, A-Z, 0-9, all the special characters)
^ --> pattern should be at the beginning
$ --> pattern should be at the end
* --> matches 0 or any number of occurrences of the preceding character
+ --> matches 1 or any number of occurrences of the preceding character
? --> matches only 0 or 1 occurrence of the preceding character
[] --> groups multiple characters / character set. Takes each character and checks if the character matches with one of the characters in the set(similar to in operator)
- --> denotes range inside character set
() --> grouping patterns
{} --> specifies the number of characters to be matched

\d --> matches any number between 0-9   or [0-9] or [0123456789]
\D --> matches everything other than numbers or [^0-9] or [^0123456789]
\w --> matches a-z, A-Z, 0-9 and also an underscore ("_")
\W --> matches all the characters other than the characters matched by \w
\s --> matches whitespaces and the other special sequences(\n, \t, \r etc)
\S --> matches everything other than the characters matched by \s
\b --> transition between a character and a non character and vice versa is called a word boundary

************************  findall() - matches all pattern in the string ***********************

greeting = "hello world welcome to regular expressions in python"

re.findall("python", greeting)
['python']

re.findall("welcome", greeting)
['welcome']

re.findall("universe", greeting)
[]

re.findall("hello", "hello world hello there how are you")
['hello', 'hello']

# re is case-sensitive
re.findall("hello", "hello world hello there how are you Hello")
['hello', 'hello']

# ignoring case using IGNORECASE flag in re
re.findall("hello", "hello world hello there how are you Hello", re.IGNORECASE)
['hello', 'hello', 'Hello']

re.findall("hello", "hello world hello there how are you Hello HELLO", re.IGNORECASE)
['hello', 'hello', 'Hello', 'HELLO']

******************************  matching all the characters using '.' *********************************
"." - matches anything and everything(a-z, A-Z, 0-9, all the special characters)
one dot = one character

re.findall(r".", "hello world! welcome to python 123")
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!', ' ', 'w', 'e', 'l', 'c', 'o', 'm', 'e', ' ', 't', 'o', ' ', 'p', 'y', 't', 'h', 'o', 'n', ' ', '1', '2', '3']

re.findall(r".", "hello world")
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']

# matching pattern("a" followed by exactly one character and followed by "b")
re.findall(r"a.b", "abc")
[]

re.findall(r"a.b", "ab")
[]

re.findall(r"a.b", "abb")
['abb']

re.findall(r"a.b", "a@b")
['a@b']

re.findall(r"a.b", "a b")
['a b']

re.findall(r"a.b", "aabb")
['aab']

**************************************** startswith(^) ***********************************************

re.findall(r"hello", "hello world hello there")
['hello', 'hello']

re.findall(r"^hello", "hello world hello there")
['hello']

re.findall(r"^hello", "world hello there")
[]

******************************************* endswith($) *********************************************
re.findall(r"hello$", "hello world hello there hello")
['hello']

re.findall(r"hello$", "world hello there hello")
['hello']

re.findall(r"hello$", "world hello there")
[]

******************************* matching multiple characters using "." ******************************

re.findall(r"a.a", "ana")
['ana']

re.findall(r"a.a", "ama")
['ama']

re.findall(r"a.a", "amma")      # one dot cannot match 2 characters in between a and a
[]

re.findall(r"a..a", "amma")
['amma']

re.findall(r"a..a", "aaaa")
['aaaa']

re.findall(r"a..a", "a  a")
['a  a']

re.findall(r"a..a", "asha")
['asha']

*************************** matching any number of any characters **********************************

re.findall(r"a.*a", "amma")     # 0 or any number of any characters in between first and last "a"
['amma']

re.findall(r"a.*a", "aa")       # 0 occurrence
['aa']

re.findall(r"a.*a", "ammma")    # 0 or any number of any characters in between first and last "a"
['ammma']

re.findall(r"an*a", "ammma")    # 0 or any number of only "n" in between first and last "a"
[]

re.findall(r"an*a", "annnna")   # 0 or any number of only "n" in between first and last "a"
['annnna']

re.findall(r"an*a", "hello anna")
['anna']

re.findall(r"an*a", "hello aa")
['aa']

************************************** combining * and ^/$ *******************************************

re.findall(r"^an*a", "hello anna")      # checks if "anna" is at the beginning
[]

re.findall(r"an*a$", "hello anna")      # checks if "anna" is at the end
['anna']

re.findall(r"an*a$", "anna hello")      # checks if "anna" is at the end
[]

re.findall(r"^anna$", "anna hello")     # checks if "anna" is at the beginning as well as at the end
[]                                      # only one condition is satisfied by the pattern that it's present at the beginning but not at the end

re.findall(r"^anna$", "anna hello anna")    # checks if "anna" is at the beginning as well as at the end
[]                                          # only one condition is satisfied by each "anna", one "anna" is at the beginning and the other is at the end
                                            # but both are not matching both the conditions individually

re.findall(r"^anna$", "anna")       # to get the match of this pattern only one word should be there
['anna']

****************************** matching one or any number of characters *******************************

re.findall(r"an+a", "ana")      # match - as there is 1 "n" between a and a
['ana']

re.findall(r"an+a", "anna")     # match - as there is more than 1 "n" between a and a
['anna']

re.findall(r"an+a", "aa")       # no match - as there is 0 "n" between a and a
[]

re.findall(r"an*a", "aa")       # There is a match even when there is no "n" bcz of "*"
['aa']

******************************************** matching 0 or 1 occurrence *******************************

re.findall(r"an?a", "aa")       # checks if there is zero or one "n"
['aa']

re.findall(r"an?a", "ana")
['ana']

re.findall(r"an?a", "anna")     no match as there are 2 "n" but ? can match only 0 or 1 "n"
[]

re.findall(r"colou?r", "this is a beautiful color and that is an ugly colour")
['color', 'colour']

************************************* matching urls with http and https *******************************

url = "http://www.google.com"
url2 = "https://www.google.com"

re.findall(r"http", url)
['http']

re.findall(r"http", url2)
['http']

re.findall(r"https?", url)
['http']

re.findall(r"https?", url2)
['https']

************************************* matching only vowel characters **********************************

# normal for loop method

words = "hello anna how are you doing"
for letter in words:
    if letter in "aeiouAEIOU":
        print(letter)

# using reg ex

re.findall(r"[aeiou]", words)       # [aeiou] -->  "a" or "e" or "i" or "o" or "u"
['e', 'o', 'a', 'a', 'o', 'a', 'e', 'o', 'u', 'o', 'i']

# to find the number of vowels

len(re.findall(r"[aeiou]", words))
11

re.findall(r"[aeiou]", words).__len__()
11

**********************************  matching a range of characters using "-" **************************

re.findall(r"[0123456789]", "the cost of this book is Rs.100")
['1', '0', '0']

re.findall(r"[abcdefghij]", "hello world")
['h', 'e', 'd']

re.findall(r"[0-9]", "the cost of this book is Rs.100")
['1', '0', '0']

re.findall(r"[a-j]", "hello world")
['h', 'e', 'd']

********************************* matching only numeric characters **********************************

re.findall(r"[0123456789]", "the cost of this book is Rs.100 and the cost is rs 999")
['1', '0', '0', '9', '9', '9']

re.findall(r"[0-9]", "the cost of this book is Rs.100 and the cost is rs 999")
['1', '0', '0', '9', '9', '9']

re.findall(r"\d", "the cost of this book is Rs.100 and the cost is rs 999")
['1', '0', '0', '9', '9', '9']

******************************** matching complete number(not one character) **********************

+ --> greedy character

re.findall(r"[0-9]+", "the cost of this book is Rs.100 and the cost is rs 999")
['100', '999']

re.findall(r"[0-9]+", "the cost of this book is Rs.100 and there 87356@899")
['100', '87356', '899']

re.findall(r"\d+", "the cost of this book is Rs.100 and the cost is rs 999")
['100', '999']

re.findall(r"\d+", "the cost of this book is Rs.100 and there 87356@899")
['100', '87356', '899']

************************************** + --> greedy character **************************************

re.findall(r"[abcd]", "abcdefghijkab")
['a', 'b', 'c', 'd', 'a', 'b']

re.findall(r"[abcd]+", "abcdefghijkab")
['abcd', 'ab']

***************** not including the characters in the character set/ negating ***********************

^ - outside the character set represents start of the string
^ - inside the character set represents negation i.e., matches everything excepts the characters in the set

re.findall(r"[^0-9]", "the cost of this book is Rs.100")
['t', 'h', 'e', ' ', 'c', 'o', 's', 't', ' ', 'o', 'f', ' ', 't', 'h', 'i', 's', ' ', 'b', 'o', 'o', 'k', ' ', 'i', 's', ' ', 'R', 's', '.']

re.findall(r"[^0-9]+", "the cost of this book is Rs.100")
['the cost of this book is Rs.']

re.findall(r"[^abcd]", "axbycde")
['x', 'y', 'e']

*********************** matching different patterns ****************************

# matches only uppercase alphabets individually
re.findall(r"[A-Z]", "This is Python Programming Class")
['T', 'P', 'P', 'C']

# matches only lowercase alphabets individually
re.findall(r"[a-z]", "This is Python Programming Class")
['h', 'i', 's', 'i', 's', 'y', 't', 'h', 'o', 'n', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g', 'l', 'a', 's', 's']

# matches only uppercase words
re.findall(r"[A-Z]+", "I am flying from BLR to DHL tomorrow")
['I', 'BLR', 'DHL']

# matches both lowercase and uppercase characters individually
re.findall(r"[a-zA-Z]", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
['I', 'a', 'm', 'f', 'l', 'y', 'i', 'n', 'g', 'f', 'r', 'o', 'm', 'B', 'L', 'R', 't', 'o', 'D', 'H', 'L', 't', 'o', 'm', 'o', 'r', 'r', 'o', 'w', 'a', 'n', 'd', 'f', 'l', 'i', 'g', 'h', 't', 'c', 'o', 's', 't', 'i', 's', 'R', 's']

# matches both lowercase, uppercase and numerical characters individually
re.findall(r"[a-zA-Z0-9]", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
['I', 'a', 'm', 'f', 'l', 'y', 'i', 'n', 'g', 'f', 'r', 'o', 'm', 'B', 'L', 'R', 't', 'o', 'D', 'H', 'L', 't', 'o', 'm', 'o', 'r', 'r', 'o', 'w', 'a', 'n', 'd', 'f', 'l', 'i', 'g', 'h', 't', 'c', 'o', 's', 't', 'i', 's', 'R', 's', '4', '5', '0', '0']

# matches everything other than lowercase, uppercase and numeric characters
re.findall(r"[^a-zA-Z0-9]", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '.']

************************** counting the number of specific characters ******************************

# counting number of numeric characters
re.findall(r"[0-9]", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
['4', '5', '0', '0']
len(re.findall(r"[0-9]", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500"))
4

# counting number of spaces
re.findall(r" ", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
len(re.findall(r" ", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500"))
12

# counting number of spaces using "\s"
re.findall(r"\s", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500")
[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
len(re.findall(r"\s", "I am flying from BLR to DHL tomorrow and flight cost is Rs.4500"))
12

# counting number of special characters excluding whitespaces
re.findall(r"[^a-zA-Z\s\d]", "I am @flying %from BLR to DHL tomorrow and flight cost is Rs.4500!!")
['@', '%', '.', '!', '!']
len(re.findall(r"[^a-zA-Z\s\d]", "I am @flying %from BLR to DHL tomorrow and flight cost is Rs.4500!!"))
5

************************************* splitting words *********************************************

re.findall(r"\w", "This is AA3456 from SFO to MIA")
['T', 'h', 'i', 's', 'i', 's', 'A', 'A', '3', '4', '5', '6', 'f', 'r', 'o', 'm', 'S', 'F', 'O', 't', 'o', 'M', 'I', 'A']

re.findall(r"\w", "!@#$%^&*()_+")
['_']

re.findall(r"[a-zA-Z]+", "This is AA3456 from SFO to MIA")
['This', 'is', 'AA', 'from', 'SFO', 'to', 'MIA']

re.findall(r"[a-zA-Z0-9]+", "This is AA3456 from SFO to MIA")
['This', 'is', 'AA3456', 'from', 'SFO', 'to', 'MIA']

re.findall(r"\w+", "This is AA3456 from SFO to MIA")
['This', 'is', 'AA3456', 'from', 'SFO', 'to', 'MIA']


******************** limiting the number of characters in a pattern using {} ************************

# matches each and every numeric character
re.findall(r"\d", "the pincode of Bangalore is 560001 and tel code is 080")
['5', '6', '0', '0', '0', '1', '0', '8', '0']

# matches all the numbers
re.findall(r"\d+", "the pincode of Bangalore is 560001 and tel code is 080")
['560001', '080']

# matching pincode - inefficient way
re.findall(r"\d\d\d\d\d\d", "the pincode of Bangalore is 560001 and tel code is 080")
['560001']

# drawback - matches 6 continuous digits even from the number with more than 6 digits
re.findall(r"\d\d\d\d\d\d", "the pincode of Bangalore is 560001 and tel code is 98779928763")
['560001', '987799']

# matching only pincode using {} - same drawback as above
re.findall(r"\d{6}", "the pincode of Bangalore is 560001 and tel code is 98779928763")
['560001', '987799']

# matching only pincode using word boundary (\b)
re.findall(r"\b\d{6}\b", "the pincode of Bangalore is 560001 and tel code is 98779928763")
['560001']
    r"\b\d{6}\b" --> the pattern should be present between a word boundary i.e the number should be
                     between a character that is matched by "\W"

***************************** matching words starting with "h" **********************************

sentence = "hello world hi how are you happy birthday"
re.findall(r"h[a-z]", sentence)
['he', 'hi', 'ho', 'ha', 'hd']

re.findall(r"h[a-z]+", sentence)
['hello', 'hi', 'how', 'happy', 'hday']

re.findall(r"\bh[a-z]+", sentence)
['hello', 'hi', 'how', 'happy']

re.findall(r"\bh[a-z]+\b", sentence)
['hello', 'hi', 'how', 'happy']

****************************** matching words starting with P and J *********************************
sentence = "Python is a programming language. Python is easier than Java"
re.findall(r"\b[PJ][a-zA-Z]+\b", sentence)
['Python', 'Python', 'Java']

****************************** matching words ending with "y" **************************************
sentence = "hi how are you happy birthday flying"

# without \b
re.findall(r"[a-zA-Z]+y", sentence)
['happy', 'birthday', 'flying']

# using \b
re.findall(r"[a-zA-Z]+y\b", sentence)
['happy', 'birthday']

******** to count the number of occurrences non-special characters in the given string ***************

sentence = "hello@world! welcome!!! to Python$"
letters = re.findall(r"[a-zA-Z]", sentence)
c = {letter: letters.count(letter)for letter in letters}

o/p
{'h': 2, 'e': 3, 'l': 4, 'o': 5, 'w': 2, 'r': 1, 'd': 1, 'c': 1, 'm': 1, 't': 2, 'P': 1, 'y': 1, 'n': 1}

************************** filtering only those characters except digits ***********************

word = "@hello12world34welcome!123"

s = re.findall(r"\D", word)
filtered_string = "".join(s)

o/p: '@helloworldwelcome!'

******************** count the characters in each word (Ignore special characters) *****************

sentence = "Hi there! How are you:) How are you doing today!"
words = re.findall(r"[a-zA-Z]+", sentence)
d = {word: len(word) for word in words}

o/p:
words --> ['Hi', 'there', 'How', 'are', 'you', 'How', 'are', 'you', 'doing', 'today']
d --> {'Hi': 2, 'there': 5, 'How': 3, 'are': 3, 'you': 3, 'doing': 5, 'today': 5}

****************** number of uppercase and lowercase letters **************************

sentence = "Hello World Welcome To Python"
upper_ = re.findall(r"[A-Z]", sentence)
lower_ = re.findall(r"[a-z]", sentence)
len(upper_)
5
len(lower_)
20

******************** print only those words with starting with vowels ******************************

sentence = "hello hi american engineers and indian writers officers united states"
re.findall(r"\b[aeiou][a-z]+\b", sentence)

o/p:
['american', 'engineers', 'and', 'indian', 'officers', 'united']

*********************************** matching only 3 letters words *********************************

sentence = "Hi there How are you How are you doing today"
re.findall(r"\b[a-zA-Z]{3}\b", sentence)

o/p:
['How', 'are', 'you', 'How', 'are', 'you']

******************************* matching either "python" or "java" ************************************

sentence = "programming in python is fun and programming in java is a mess"
re.findall(r"(python|java)", sentence)

o/p:
['python', 'java']

******************************** matching words starting with "he" ***********************************

sentence = "he helps the community and he is the hero"

re.findall(r"\bhe[a-zA-Z]+", sentence)  >>>     ['helps', 'hero']
re.findall(r"\bhe[a-zA-Z]*", sentence)  >>>     ['he', 'helps', 'he', 'hero']


************************ matching words starting with "he" or "se" *******************************
sentence = "he helps the community and he is the hero she sells sea shells on the sea shore"

re.findall(r"\b(he|se)[a-zA-Z]*", sentence)
['he', 'he', 'he', 'he', 'se', 'se', 'se']
re.findall(r"\b(?:he|se)[a-zA-Z]*", sentence)
['he', 'helps', 'he', 'hero', 'sells', 'sea', 'sea']











